dnl Process this file with autoconf to produce a configure script.
AC_INIT(rawsrv)
AM_INIT_AUTOMAKE(meabench, 1.2.6)
dnl AM_PROG_LIBTOOL
AC_PROG_LIBTOOL

AC_CONFIG_MACRO_DIR([m4])


dnl #########################################################################
dnl ################## Following code by Tim Toolan #########################

dnl License Copyright (c) 2008 Tim Toolan <toolan@ele.uri.edu>
dnl Copying and distribution of this file, with or without modification, 
dnl are permitted in any medium without royalty provided the copyright 
dnl notice and this notice are preserved.
AC_DEFUN([AX_COMPARE_VERSION], [
  AC_PROG_AWK

  # Used to indicate true or false condition
  ax_compare_version=false

  # Convert the two version strings to be compared into a format that
  # allows a simple string comparison.  The end result is that a version
  # string of the form 1.12.5-r617 will be converted to the form
  # 0001001200050617.  In other words, each number is zero padded to four
  # digits, and non digits are removed.
  AS_VAR_PUSHDEF([A],[ax_compare_version_A])
  A=`echo "$1" | sed -e 's/\([[0-9]]*\)/Z\1Z/g' \
                     -e 's/Z\([[0-9]]\)Z/Z0\1Z/g' \
                     -e 's/Z\([[0-9]][[0-9]]\)Z/Z0\1Z/g' \
                     -e 's/Z\([[0-9]][[0-9]][[0-9]]\)Z/Z0\1Z/g' \
                     -e 's/[[^0-9]]//g'`

  AS_VAR_PUSHDEF([B],[ax_compare_version_B])
  B=`echo "$3" | sed -e 's/\([[0-9]]*\)/Z\1Z/g' \
                     -e 's/Z\([[0-9]]\)Z/Z0\1Z/g' \
                     -e 's/Z\([[0-9]][[0-9]]\)Z/Z0\1Z/g' \
                     -e 's/Z\([[0-9]][[0-9]][[0-9]]\)Z/Z0\1Z/g' \
                     -e 's/[[^0-9]]//g'`

  dnl # In the case of le, ge, lt, and gt, the strings are sorted as necessary
  dnl # then the first line is used to determine if the condition is true.
  dnl # The sed right after the echo is to remove any indented white space.
  m4_case(m4_tolower($2),
  [lt],[
    ax_compare_version=`echo "x$A
x$B" | sed 's/^ *//' | sort -r | sed "s/x${A}/false/;s/x${B}/true/;1q"`
  ],
  [gt],[
    ax_compare_version=`echo "x$A
x$B" | sed 's/^ *//' | sort | sed "s/x${A}/false/;s/x${B}/true/;1q"`
  ],
  [le],[
    ax_compare_version=`echo "x$A
x$B" | sed 's/^ *//' | sort | sed "s/x${A}/true/;s/x${B}/false/;1q"`
  ],
  [ge],[
    ax_compare_version=`echo "x$A
x$B" | sed 's/^ *//' | sort -r | sed "s/x${A}/true/;s/x${B}/false/;1q"`
  ],[
    dnl Split the operator from the subversion count if present.
    m4_bmatch(m4_substr($2,2),
    [0],[
      # A count of zero means use the length of the shorter version.
      # Determine the number of characters in A and B.
      ax_compare_version_len_A=`echo "$A" | $AWK '{print(length)}'`
      ax_compare_version_len_B=`echo "$B" | $AWK '{print(length)}'`

      # Set A to no more than B's length and B to no more than A's length.
      A=`echo "$A" | sed "s/\(.\{$ax_compare_version_len_B\}\).*/\1/"`
      B=`echo "$B" | sed "s/\(.\{$ax_compare_version_len_A\}\).*/\1/"`
    ],
    [[0-9]+],[
      # A count greater than zero means use only that many subversions
      A=`echo "$A" | sed "s/\(\([[0-9]]\{4\}\)\{m4_substr($2,2)\}\).*/\1/"`
      B=`echo "$B" | sed "s/\(\([[0-9]]\{4\}\)\{m4_substr($2,2)\}\).*/\1/"`
    ],
    [.+],[
      AC_WARNING(
        [illegal OP numeric parameter: $2])
    ],[])

    # Pad zeros at end of numbers to make same length.
    ax_compare_version_tmp_A="$A`echo $B | sed 's/./0/g'`"
    B="$B`echo $A | sed 's/./0/g'`"
    A="$ax_compare_version_tmp_A"

    # Check for equality or inequality as necessary.
    m4_case(m4_tolower(m4_substr($2,0,2)),
    [eq],[
      test "x$A" = "x$B" && ax_compare_version=true
    ],
    [ne],[
      test "x$A" != "x$B" && ax_compare_version=true
    ],[
      AC_WARNING([illegal OP parameter: $2])
    ])
  ])

  AS_VAR_POPDEF([A])dnl
  AS_VAR_POPDEF([B])dnl

  dnl # Execute ACTION-IF-TRUE / ACTION-IF-FALSE.
  if test "$ax_compare_version" = "true" ; then
    m4_ifvaln([$4],[$4],[:])dnl
    m4_ifvaln([$5],[else $5])dnl
  fi
]) dnl AX_COMPARE_VERSION

dnl ####################### end of Tim Toolan's code #######################
dnl ########################################################################


dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
dnl AC_PROG_F77
AC_PROG_LN_S
AC_PROG_MAKE_SET

if test "x$CXX" != "x" && $CXX -v >/dev/null 2>/dev/null; then
  true 
else
  AC_MSG_ERROR([No C++ compiler found.])
fi

if test "x$CC" != "x" && $CC -v >/dev/null 2>/dev/null; then
  true
else
  AC_MSG_ERROR([No C compiler found.])
fi

if test "x$LN_S" != "x" && $LN_S --help >/dev/null 2>/dev/null; then
  true
else
  AC_MSG_ERROR([No 'ln -s' program found.])
fi

AC_CHECK_PROG(havePDFLatex, pdflatex, yes)
if test "x$havePDFLatex" != "xyes"; then
  AC_MSG_ERROR([We do not have pdflatex.])
fi
dnl Checks for libraries.
dnl pthread
AC_CHECK_LIB(pthread, pthread_create,,"Cannot find pthread library. pthread may be obtained from various sources. Your distribution may carry it as an optional package.")

dnl qt [DW]
AC_LANG_CPLUSPLUS
QTPATHS="$QTDIR  /usr/lib/qt3 /usr/share/qt3 /usr/lib/qt"
MYQT=""
for x in $QTPATHS; do
  if test -f $x/include/qapplication.h ; then
     MYQT="$x"
  fi
done
AC_MSG_CHECKING([for qapplication.h])
AC_CACHE_VAL(ac_cv_hdr_qt,
  [ac_save_CPPFLAGS="$CPPFLAGS" 
   CPPFLAGS="$CPPFLAGS -I$MYQT/include"
   AC_TRY_COMPILE([
       #include <qapplication.h>
     ],[
       int c;
       char **v;
       QApplication myap(c,v);
     ],
     [ac_cv_hdr_qt=yes],
     [ac_cv_hdr_qt=no])
   CPPFLAGS="$ac_save_CPPFLAGS"
  ])
if eval "test $ac_cv_hdr_qt = no"; then
  AC_MSG_RESULT(no)
  AC_MSG_ERROR([Qt includes not found. Please set QTDIR before running configure again.])
else
  AC_MSG_RESULT(yes)
  QTINC="-I$MYQT/include"
  AC_SUBST(QTINC)
fi

AC_MSG_CHECKING([for qVersion in -lqt-mt])
AC_CACHE_VAL(ac_cv_lib_qt,
  [ac_save_LIBS="$LIBS"
   ac_save_CPPFLAGS="$CPPFLAGS" 
   LIBS="-L$MYQT/lib -lqt-mt $LIBS"
   CPPFLAGS="$CPPFLAGS -I$MYQT/include"
   AC_TRY_LINK([
       #include <qapplication.h>
     ],[
       char const *x=qVersion();
     ],
     [ac_cv_lib_qt=qt-mt],
     [ac_cv_lib_qt=no])
   LIBS="$ac_save_LIBS"
   CPPFLAGS="$ac_save_CPPFLAGS"
  ])
if eval test "$ac_cv_lib_qt = no"; then
  AC_MSG_CHECKING([for qVersion in -lqt])
  AC_CACHE_VAL(ac_cv_lib_qt,
    [ac_save_LIBS="$LIBS"
     ac_save_CPPFLAGS="$CPPFLAGS" 
     LIBS="-L$MYQT/lib -lqt $LIBS"
     CPPFLAGS="$CPPFLAGS -I$MYQT/include"
     AC_TRY_LINK([
         #include <qapplication.h>
       ],[
         char const *x=qVersion();
       ],
       [ac_cv_lib_qt=qt],
       [ac_cv_lib_qt=no])
     LIBS="$ac_save_LIBS"
     CPPFLAGS="$ac_save_CPPFLAGS"
    ])
fi
if eval "test $ac_cv_lib_qt = no"; then
  AC_MSG_RESULT(no)
  AC_MSG_ERROR(AC_MSG_ERROR([Qt libraries not found. Please set QTDIR before running configure again.]))
else
  AC_MSG_RESULT(yes)
  QTLIB="-L$MYQT/lib -l$ac_cv_lib_qt"
  AC_SUBST(QTLIB)
fi

AC_MSG_CHECKING([for moc])
AC_CACHE_VAL(ac_cv_bin_qt,
  [tmpFILE=/tmp/mocv$$
   $MYQT/bin/moc -v 2> $tmpFILE
   if grep -q 'Qt 3' $tmpFILE; then
     ac_cv_bin_qt=$MYQT/bin
   else
     unlink $tmpFILE
     moc -v 2> $tmpFILE
     if grep -q 'Qt 3' $tmpFILE; then
       ac_cv_bin_qt=yes
     else
       ac_cv_bin_qt=no
     fi
   fi
   unlink $tmpFILE
  ])

AC_MSG_RESULT($ac_cv_bin_qt)
if eval "test $ac_cv_bin_qt = no"; then
  AC_MSG_ERROR(AC_MSG_ERROR([Qt binaries (moc) not found. Please set QTDIR before running configure again.]))
else
  if eval "test $ac_cv_bin_qt = yes"; then
     QTBIN=""
  else
     QTBIN="$MYQT/bin/"
  fi
  AC_SUBST(QTBIN)
fi

AC_LANG_C

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h sys/ioctl.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME

dnl Checks for library functions.
AC_FUNC_GETPGRP
AC_PROG_GCC_TRADITIONAL
AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_CHECK_FUNCS(getcwd gettimeofday mkdir select socket strerror)

dnl Check for kernel includes
AC_MSG_CHECKING([for kernel include files])
AC_ARG_WITH(kernel, [ --with-kernel=KERNEL_PATH   Define the location of the 
	                   kernel include files. Default: /lib/modules/`uname -r`/build ],[
	KERNEL_DIR=$withval ],[
	KERNEL_DIR=/lib/modules/`uname -r`/build ])
if eval "test x$withval = xno"; then
        AC_MSG_WARN("Kernel includes not found. You will get compilation errors when building the drivers.")
	KERNEL_DIR=no
else
	if eval "test ! -f $KERNEL_DIR/include/linux/kernel.h"; then
		AC_MSG_ERROR("Cannot find kernel includes. Please specify with --with-kernel.")
		KERNEL_DIR=no
	fi
fi
AC_MSG_RESULT([$KERNEL_DIR]);
KERNEL_INC=$KERNEL_DIR/include
AC_SUBST(KERNEL_DIR)
AC_SUBST(KERNEL_INC)

dnl Check for kernel version number
AC_MSG_CHECKING([for kernel version number 2.4 or 2.6 in include path])
AC_ARG_WITH(kernel-version, [ --with-kernel-version=2.4.nn or 2.6.nn   Define which kernel series to use],[
	KERNEL_LONG_VSN=$withval ],[
	KERNEL_LONG_VSN=`echo $KERNEL_INC | sed ['s/[^0-9]*\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*/\\1/']` ])
KERNEL_VSN=`echo $KERNEL_LONG_VSN|cut -f1-2 -d.`
KERNEL_SUB_VSN=`echo $KERNEL_LONG_VSN|cut -f3 -d.`
if eval "test x$KERNEL_VSN = x2.4"; then
	AC_MSG_RESULT([found 2.4])
elif eval "test x$KERNEL_VSN = x2.6"; then
	AC_MSG_RESULT([found 2.6])
        if eval "echo $KERNEL_SUB_VSN 24|tr ' ' '\n' | sort|head -n 1|grep -q 24"; then
	  dnl Starting in kernel 2.6.24, class_device_create() became device_create()
	  KERNEL_NEWDEVICE=1
        else
	  KERNEL_NEWDEVICE=0
        fi
        if eval "echo $KERNEL_SUB_VSN 27|tr ' ' '\n' | sort|head -n 1|grep -q 27"; then
	  dnl Starting in kernel 2.6.28, device_create() gained an extra argument
	  KERNEL_USEDRVDATA=1
        else
	  KERNEL_USEDRVDATA=0
        fi
else
	AC_MSG_RESULT([not found])
	AC_MSG_ERROR("Unknown kernel version ($KERNEL_VSN). Please specify 2.4 or 2.6 with --with-kernel-version.")
fi
AC_SUBST(KERNEL_VSN)
AC_SUBST(KERNEL_NEWDEVICE)
AC_SUBST(KERNEL_USEDRVDATA)

dnl Check for superfast
dnl AC_MSG_CHECKING([ Using ultrafast ])
dnl AC_ARG_WITH(ultrafast, [ --with-ultrafast         Enable low-latency tricks ],[
dnl 	AC_MSG_RESULT([yes])
dnl  	AC_DEFINE(MEA_ULTRAFAST,1) ],[ 
dnl 	AC_MSG_RESULT([no]) ])

dnl Check for choice of hardware [DW]
warn_DEFAULT=no
AC_ARG_WITH(hardware,  [  --with-hardware=DEVICE  Select the device to build for. Currently supported 
                          choices are:
                          mcs - MultiChannel Systems hardware with 
                                Thomas DeMarse's driver
			  mcsE - MultiChannel Systems hardware rev. E with
                                Thomas DeMarse's driver
                          uei - United Electronic Industries PowerDAQ with
                                Daniel Wagenaar's driver
                          ni  - National Instruments PCI6259 DAQ (2) with
                                Douglas Bakkum's driver (using comedi)],[
	if eval "test x$withval = xmcs"; then
		MEAHARDWARE=mcs
		CAPSHARDWARE=MCS
		AC_DEFINE(MCSHARDWARE,1)
		dnl HWSUBDIR=MCCard
	elif eval "test x$withval = xmcsE"; then
		MEAHARDWARE=mcs
		CAPSHARDWARE=MCS
		AC_DEFINE(MCSHARDWARE,1)
		AC_DEFINE(MCSSCALE,1)
		dnl HWSUBDIR=MCCard
	elif eval "test x$withval = xni"; then
		MEAHARDWARE=ni
		CAPSHARDWARE=NI
		AC_DEFINE(NIHARDWARE,1)
		LIBS="$LIBS -lcomedi"
	elif eval "test x$withval = xuei"; then
		MEAHARDWARE=uei
		CAPSHARDWARE=UEI
		AC_DEFINE(UEIHARDWARE,1)
		dnl HWSUBDIR=pdmeata

		Check for rtlinux includes
		AC_ARG_WITH(rtlinux, [ --with-rtlinux=RTLINUX_INCLUDE_PATH   Define the location 
					   of the rtlinux include files. Default: /usr/rtlinux/include ],[
			RTLINUX_INC=$withval ],[
			RTLINUX_INC=/usr/rtlinux/include ])
		AC_MSG_CHECKING([for rtlinux include files])
		if eval "test ! -f $RTLINUX_INC/rtl.h"; then
			AC_MSG_ERROR("Cannot find rtlinux includes. Please specify with --with-rtlinux.")
			RTLINUX_INC=no
		fi
		AC_MSG_RESULT([$RTLINUX_INC]);
		AC_SUBST(RTLINUX_INC)
		
		dnl Check for PowerDAQ includes
		AC_MSG_CHECKING([for powerdaq include files])
		AC_ARG_WITH(powerdaq, [ --with-powerdaq=POWERDAQ_INCLUDE_PATH   Define the location of
					   the powerdaq include files. Default: /usr/powerdaq/include ],[
			POWERDAQ_INC=$withval ],[
			POWERDAQ_INC=/usr/powerdaq/include ])
		if eval "test ! -f $POWERDAQ_INC/powerdaq.h"; then
			AC_MSG_WARN("Cannot find powerdaq includes. Please specify with --with-powerdaq.")
			POWERDAQ_INC=no
		fi
		AC_MSG_RESULT([$POWERDAQ_INC]);
		AC_SUBST(POWERDAQ_INC)

	else
        	AC_MSG_ERROR( "Unknown device '$withval'. Type 'configure --help' to view options" )
	fi	
	AC_DEFINE_UNQUOTED(MEAHARDWARE,$withval) ],[
	dnl MEAHARDWARE=mcs
	dnl CAPSHARDWARE=MCS
	dnl AC_DEFINE(MCSHARDWARE,1)
	dnl AC_DEFINE(MEAHARDWARE,mcs)
	AC_MSG_ERROR("Please specify what hardware you are using by way of the '--with-hardware' option. For instance: './configure --with-hardware=mcsE'. Please see the manual.")
	dnl HWSUBDIR=MCCard
        warn_DEFAULT=yes
        ])
AC_SUBST(MEAHARDWARE)
AC_SUBST(CAPSHARDWARE)
AM_CONDITIONAL([MCSHARDWARE], [test x$MEAHARDWARE = xmcs])
AM_CONDITIONAL([UEIHARDWARE], [test x$MEAHARDWARE = xuei])
AM_CONDITIONAL([NIHARDWARE],  [test x$MEAHARDWARE = xni] )
AM_CONDITIONAL([COND_KERNEL_2_4], [test x$KERNEL_VSN = x2.4])
AM_CONDITIONAL([COND_KERNEL_2_6], [test x$KERNEL_VSN = x2.6])

dnl Check for comedi buffer size
AC_MSG_CHECKING([for comedi buffer size])
AC_ARG_WITH(comedi-buffer, [ --with-comedi-buffer=BYTES   Define buffer size for NI/Comedi driver],[
	COMEDI_BUFFER_SIZE=$withval ],[
	COMEDI_BUFFER_SIZE=1073152 ])
AC_MSG_RESULT("$COMEDI_BUFFER_SIZE")
AC_SUBST(COMEDI_BUFFER_SIZE)

AC_OUTPUT(config.h \
	  MCCard.h \
          Makefile \
          base/Makefile \
	  common/Makefile \
          gui/Makefile \
          tools/Makefile \
          extractwindow/Makefile \
          spikesrv/Makefile \
          monitor/Makefile \
          replay/Makefile \
          record/Makefile \
          scope/Makefile \
          artifilt/Makefile \
          raster/Makefile \
	  flexraster/Makefile \
	  spikesound/Makefile \
          rawsrv/Makefile \
	  neurosock/Makefile
          utils/Makefile \
          60hz/Makefile \
          rms/Makefile \
	  perl/Makefile \
	  matlab/Makefile \
	  doc/Makefile \
	  scripts/Makefile \
	  pdmeata/Makefile \
	  MCCard-linux-2.4/Makefile \
	  MCCard-linux-2.6/Makefile
	  MCCard-linux-2.6/whatfuncs.h
          )

if test "$warn_DEFAULT" = "yes"; then
	AC_MSG_NOTICE( "Using MCS hardware by default. Override using --with-hardware=XXX." )
fi
