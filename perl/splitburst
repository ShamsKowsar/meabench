#!/usr/bin/perl -w

# perl/splitburst: part of meabench, an MEA recording and analysis tool
# Copyright (C) 2000-2002  Daniel Wagenaar (wagenaar@caltech.edu)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA



use strict;

sub usage {
print STDERR <<'EOF';
Usage: splitburst burstfile infile [out-burst [out-inter]]

where burstfile is the output of findburst and infile is a file of spikeinfos.

Outputs to infile.burst those spikes that are deemed to be part of a burst,
and to infile.inter those spikes that occur between bursts. Infile must be
time sorted (by spikeorder) before passing to splitburst.

Timestamps are not altered on either of the output files.

Last two arguments override standard filenames.
EOF
exit(1);
}

my $RECLEN = 164;
my $RECPACK = "LLssss75";

usage() if @ARGV<2;
usage() if @ARGV>4;

my $burstlist = shift @ARGV;
my $infile = shift @ARGV;
my $burstout = $infile . ".burst"; $burstout = shift @ARGV if @ARGV;
my $interout = $infile . ".inter"; $interout = shift @ARGV if @ARGV;

open BURSTLIST, "<$burstlist" or die "Cannot read $burstlist";
open INFILE, "<$infile" or die "Cannot read $infile";
open BURSTOUT, ">$burstout" or die "Cannot write $burstout";
open INTEROUT, ">$interout" or die "Cannot write $interout";

my ($burststart, $burstend) = getburst();
my $spike;
while (read(INFILE,$spike,$RECLEN)==$RECLEN) {
  my @t = unpack("LL",$spike);
  my $t = $t[0]/25000 + $t[1]*171798.69184;
  if ($t < $burststart) {
    print INTEROUT $spike;
  } elsif ($t < $burstend) {
    print BURSTOUT $spike;
  } else {
    ($burststart, $burstend) = getburst();
  }
}
exit(0);

sub getburst {
  my $line = <BURSTLIST>;
  return (0,0) unless defined $line;
  chomp $line;
  $line =~ s/^ +//;
print STDERR "> $line\n";
  my ($t0, $dt) = split(/ +/,$line);
  return ($t0, $t0+$dt);
}
